generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id       Int       @id @default(autoincrement())
  dni      String    
  nombre   String
  apellido String
  telefono String?
  email    String?   
  Reserva  Reserva[]
  estado   String    @default("activo") // ← nuevo

  @@index([apellido, nombre])
}

model ClienteHist {
  id        Int      @id @default(autoincrement())
  version   Int
  clienteId Int
  dni       String
  nombre    String
  apellido  String
  telefono  String?
  email     String?
  accion    String // CREAR | ACTUALIZAR | ELIMINAR
  usuarioId Int?
  estado    String
  user      String?
  changedAt DateTime @default(now())

  @@index([clienteId, changedAt])
}

model Cancha {
  id            Int            @id @default(autoincrement())
  nombre        String         
  medidas       String
  estado        String         @default("activo")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  configuracion Configuracion?
  historicos    CanchaHist[]
  Reserva       Reserva[]

  //Lado opuesto de la relación con ConfiguracionHist (nuevo)
  configHistoricos ConfiguracionHist[] @relation("Cancha_ConfigHist")

  @@index([nombre])
  @@index([medidas])
}

model CanchaHist {
  id        Int      @id @default(autoincrement())
  canchaId  Int
  version   Int
  accion    String // CREAR | ACTUALIZAR | INACTIVAR
  usuarioId Int?
  user      String? // nombre del actor (req.userName)
  // snapshot
  nombre    String
  medidas   String?
  estado    String
  changedAt DateTime @default(now())

  cancha Cancha @relation(fields: [canchaId], references: [id])

  @@index([canchaId, changedAt])
}

model Configuracion {
  id Int @id @default(autoincrement())

  // FK a Cancha, única para que NO haya dos configuraciones de la misma cancha
  canchaId Int    @unique
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  // montos
  monto_cancha Decimal @db.Decimal(12, 2)
  monto_sena   Decimal @db.Decimal(12, 2)

  // Lado opuesto de la relación con ConfiguracionHist (nuevo nombre explícito)
  historicos ConfiguracionHist[] @relation("Config_ConfigHist")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ConfiguracionHist {
  id              Int      @id @default(autoincrement())
  configuracionId Int
  canchaId        Int
  version         Int
  accion          String // CREAR | ACTUALIZAR
  usuarioId       Int?
  user            String?
  monto_cancha    Decimal  @db.Decimal(12, 2)
  monto_sena      Decimal  @db.Decimal(12, 2)
  changedAt       DateTime @default(now())

  //Nombres de relación explícitos en AMBOS lados
  configuracion Configuracion @relation("Config_ConfigHist", fields: [configuracionId], references: [id])
  cancha        Cancha        @relation("Cancha_ConfigHist", fields: [canchaId], references: [id])

  @@index([configuracionId, changedAt])
  @@index([canchaId, changedAt])
}

model Usuario {
  id           Int           @id @default(autoincrement())
  user         String        
  password     String
  nombre       String
  apellido     String
  celular      String
  email        String?       
  tipo_usuario String
  estado       String        @default("activo")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Reserva      Reserva[]
  ReservaHist  ReservaHist[]

  @@index([apellido, nombre])
  @@index([user])
}

model UsuarioHist {
  id        Int    @id @default(autoincrement())
  usuarioId Int // id del usuario “objetivo” (al que se le hace el cambio)
  version   Int
  accion    String // CREAR | ACTUALIZAR | INACTIVAR
  actorId   Int? // id del usuario que hizo el cambio (req.uid), si aplica

  user         String? // nombre del actor (req.userName), si aplica
  userLogin    String
  nombre       String
  apellido     String
  celular      String?
  email        String?
  tipo_usuario String
  estado       String
  changedAt    DateTime @default(now())

  @@index([usuarioId, changedAt])
}

model Reserva {
  id Int @id @default(autoincrement())

  // Relaciones
  clienteId Int
  cliente   Cliente @relation(fields: [clienteId], references: [id])

  canchaId Int
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  usuarioId Int?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])

  // Datos de reserva (mantenemos campos que usabas en Mongo)
  estado_pago String // "TOTAL" | "SEÑA" | "IMPAGO"
  forma_pago  String // "EFECTIVO" | "TRANSFERENCIA" | "..." (lo que uses)
  estado      String @default("activo") // "activo" | "inactivo" (soft delete)

  monto_cancha Decimal @default(0) @db.Decimal(12, 2)
  monto_sena   Decimal @default(0) @db.Decimal(12, 2)

  // Fecha y hora (como en Mongo)
  fecha      DateTime // fecha/hora completa si la usás
  fechaCopia DateTime @db.Date // el "YYYY-MM-DD" que consultás mucho
  hora       String // "HH:mm"

  // Campos que usaba tu front/calendario
  title String?
  start DateTime?
  end   DateTime?

  // Denormalizados para reportes rápidos (como ya hacías)
  nombreCliente   String
  apellidoCliente String
  user            String? // username textual (además de usuarioId)
  observacion     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  historicos ReservaHist[]

  @@index([canchaId, fechaCopia, hora])
  @@index([fechaCopia, estado])
  @@index([clienteId, fecha])
}

model ReservaHist {
  id        Int     @id @default(autoincrement())
  reservaId Int
  reserva   Reserva @relation(fields: [reservaId], references: [id])

  // Número de versión por reserva (1,2,3...)
  version Int

  // Quién y cuándo
  changedById Int?
  changedBy   Usuario? @relation(fields: [changedById], references: [id])
  changedAt   DateTime @default(now())

  // Qué pasó (crear/actualizar/cancelar)
  action String // "CREAR" | "ACTUALIZAR" | "CANCELAR"

  // Snapshot de la reserva en esa versión (para trazabilidad)
  clienteId       Int
  canchaId        Int
  usuarioId       Int?
  estado_pago     String
  forma_pago      String
  estado          String
  monto_cancha    Decimal   @db.Decimal(12, 2)
  monto_sena      Decimal   @db.Decimal(12, 2)
  fecha           DateTime
  fechaCopia      DateTime  @db.Date
  hora            String
  title           String?
  start           DateTime?
  end             DateTime?
  nombreCliente   String
  apellidoCliente String
  user            String?
  observacion     String?

  @@unique([reservaId, version])
  @@index([reservaId, version])
}
