generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id       Int       @id @default(autoincrement())
  dni      String    @unique
  nombre   String
  apellido String
  telefono String?
  email    String?   @unique
  Reserva  Reserva[]

  @@index([apellido, nombre])
}

model Cancha {
  id            Int                 @id @default(autoincrement())
  nombre        String              @unique
  medidas       String
  configuracion Configuracion?
  historicos    ConfiguracionHist[]
  Reserva       Reserva[]

  @@index([nombre])
  @@index([medidas])
}

model Configuracion {
  id Int @id @default(autoincrement())

  // FK a Cancha, única para que NO haya dos configuraciones de la misma cancha
  canchaId Int    @unique
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  // montos
  monto_cancha Decimal @db.Decimal(12, 2)
  monto_sena   Decimal @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id            Int                 @id @default(autoincrement())
  user          String              @unique
  password      String
  nombre        String
  apellido      String
  celular       String
  email         String?             @unique
  tipo_usuario  String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  cambiosConfig ConfiguracionHist[] // (opcional) ver quién hizo el cambio
  Reserva       Reserva[]
  ReservaHist   ReservaHist[]

  @@index([apellido, nombre])
  @@index([user])
}

model ConfiguracionHist {
  id       Int    @id @default(autoincrement())
  canchaId Int
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  // Datos en esa versión:
  monto_cancha Decimal @db.Decimal(12, 2)
  monto_sena   Decimal @db.Decimal(12, 2)

  version     Int
  changedById Int? // quién hizo el cambio (opcional)
  changedBy   Usuario? @relation(fields: [changedById], references: [id])

  valid_from DateTime  @default(now()) // cuándo empezó a regir
  valid_to   DateTime? // cuándo dejó de regir (null = vigente si usás solo histórico)

  @@unique([canchaId, version]) // una versión por número
  @@index([canchaId, valid_from])
}

model Reserva {
  id Int @id @default(autoincrement())

  // Relaciones
  clienteId Int
  cliente   Cliente @relation(fields: [clienteId], references: [id])

  canchaId Int
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  usuarioId Int?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])

  // Datos de reserva (mantenemos campos que usabas en Mongo)
  estado_pago String // "TOTAL" | "SEÑA" | "IMPAGO"
  forma_pago  String // "EFECTIVO" | "TRANSFERENCIA" | "..." (lo que uses)
  estado      String @default("activo") // "activo" | "inactivo" (soft delete)

  monto_cancha Decimal @default(0) @db.Decimal(12, 2)
  monto_sena   Decimal @default(0) @db.Decimal(12, 2)

  // Fecha y hora (como en Mongo)
  fecha      DateTime // fecha/hora completa si la usás
  fechaCopia DateTime @db.Date // el "YYYY-MM-DD" que consultás mucho
  hora       String // "HH:mm"

  // Campos que usaba tu front/calendario
  title String?
  start DateTime?
  end   DateTime?

  // Denormalizados para reportes rápidos (como ya hacías)
  nombreCliente   String
  apellidoCliente String
  user            String? // username textual (además de usuarioId)
  observacion     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  historicos ReservaHist[]

  @@index([canchaId, fechaCopia, hora])
  @@index([fechaCopia, estado])
  @@index([clienteId, fecha])
}

model ReservaHist {
  id        Int     @id @default(autoincrement())
  reservaId Int
  reserva   Reserva @relation(fields: [reservaId], references: [id])

  // Número de versión por reserva (1,2,3...)
  version Int

  // Quién y cuándo
  changedById Int?
  changedBy   Usuario? @relation(fields: [changedById], references: [id])
  changedAt   DateTime @default(now())

  // Qué pasó (crear/actualizar/cancelar)
  action String // "CREAR" | "ACTUALIZAR" | "CANCELAR"

  // Snapshot de la reserva en esa versión (para trazabilidad)
  clienteId       Int
  canchaId        Int
  usuarioId       Int?
  estado_pago     String
  forma_pago      String
  estado          String
  monto_cancha    Decimal   @db.Decimal(12, 2)
  monto_sena      Decimal   @db.Decimal(12, 2)
  fecha           DateTime
  fechaCopia      DateTime  @db.Date
  hora            String
  title           String?
  start           DateTime?
  end             DateTime?
  nombreCliente   String
  apellidoCliente String
  user            String?
  observacion     String?

  @@unique([reservaId, version])
  @@index([reservaId, version])
}
