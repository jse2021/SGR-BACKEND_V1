generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id       Int     @id @default(autoincrement())
  dni      String  @unique
  nombre   String
  apellido String
  telefono String?
  email    String? @unique

  @@index([apellido, nombre])
}

model Cancha {
  id            Int                 @id @default(autoincrement())
  nombre        String              @unique
  medidas       String
  configuracion Configuracion?
  historicos    ConfiguracionHist[]

  @@index([nombre])
  @@index([medidas])
}

model Configuracion {
  id Int @id @default(autoincrement())

  // FK a Cancha, única para que NO haya dos configuraciones de la misma cancha
  canchaId Int    @unique
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  // montos
  monto_cancha Decimal @db.Decimal(12, 2)
  monto_sena   Decimal @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id            Int                 @id @default(autoincrement())
  user          String              @unique
  password      String
  nombre        String
  apellido      String
  celular       String
  email         String?             @unique
  tipo_usuario  String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  cambiosConfig ConfiguracionHist[] // (opcional) ver quién hizo el cambio

  @@index([apellido, nombre])
  @@index([user])
}

model ConfiguracionHist {
  id       Int    @id @default(autoincrement())
  canchaId Int
  cancha   Cancha @relation(fields: [canchaId], references: [id])

  // Datos en esa versión:
  monto_cancha Decimal @db.Decimal(12, 2)
  monto_sena   Decimal @db.Decimal(12, 2)

  version     Int
  changedById Int? // quién hizo el cambio (opcional)
  changedBy   Usuario? @relation(fields: [changedById], references: [id])

  valid_from DateTime  @default(now()) // cuándo empezó a regir
  valid_to   DateTime? // cuándo dejó de regir (null = vigente si usás solo histórico)

  @@unique([canchaId, version]) // una versión por número
  @@index([canchaId, valid_from])
}
